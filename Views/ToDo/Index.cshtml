@model ToDoApp.Models.ToDoViewModel

@{
    ViewData["Title"] = "Home";
}

<div class="container">
    <h2 class="text-center mb-3">Get Things Done, One Task at a Time!</h2>

    <a href="@Url.Action("Create")" class="btn-create">Create New</a>

    <div class="row mb-3">
        <div class="col-md-6 d-flex align-items-center">
            <label for="pageSize" class="me-2 mb-0">Show</label>
            <select id="pageSize" class="form-select form-select-sm" style="width: auto;">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
            </select>
            <span class="ms-2">entries</span>
        </div>
        <div class="col-md-6 d-flex justify-content-end">
            <label for="searchInput" class="me-2 mb-0">Search:</label>
            <input type="text" id="searchInput" class="form-control form-control-sm" placeholder="Search by Title" style="width: 250px;">
        </div>
    </div>

    <div id="todoTableContainer">
        @await Html.PartialAsync("_TodoTable", Model)
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var searchInput = document.getElementById('searchInput');
        var pageSizeSelect = document.getElementById('pageSize');
        var todoTableContainer = document.getElementById('todoTableContainer');

        searchInput.addEventListener('input', performSearch);
        pageSizeSelect.addEventListener('change', performSearch);

        function performSearch() {
            console.log('Performing search...');
            var searchString = searchInput.value;
            var pageSize = pageSizeSelect.value;

            console.log('Search string:', searchString);
            console.log('Page size:', pageSize);

            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (xhr.status === 200) {
                        console.log('Search successful');
                        todoTableContainer.innerHTML = xhr.responseText;
                    } else {
                        console.error('Search failed:', xhr.status);
                    }
                }
            };

            var url = '@Url.Action("Index")' + '?searchString=' + encodeURIComponent(searchString) + '&pageSize=' + pageSize;
            console.log('Request URL:', url);
            xhr.open('GET', url, true);
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            xhr.send();
        }

        // Handle pagination clicks
        todoTableContainer.addEventListener('click', function (e) {
            if (e.target.classList.contains('page-link')) {
                e.preventDefault();
                var url = e.target.getAttribute('href');
                console.log('Pagination URL:', url);

                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        if (xhr.status === 200) {
                            console.log('Pagination successful');
                            todoTableContainer.innerHTML = xhr.responseText;
                        } else {
                            console.error('Pagination failed:', xhr.status);
                        }
                    }
                };

                xhr.open('GET', url, true);
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                xhr.send();
            }
        });
    });
</script>